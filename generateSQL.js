require('dotenv').config(); // Charge les variables d'environnement depuis .env
const { GoogleGenerativeAI } = require("@google/generative-ai"); // Importe la librairie Google Generative AI
const fs = require("fs"); // Importe le module fs (file system) pour lire des fichiers
const yargs = require('yargs'); // Importe la librairie yargs pour g√©rer les arguments de ligne de commande
const { hideBin } = require('yargs/helpers'); // Importe hideBin pour nettoyer les arguments

// üîí R√©cup√©rer la cl√© API depuis les variables d‚Äôenvironnement
const apiKey = process.env.GEMINI_API_KEY;

// V√©rifie si la cl√© API Gemini est d√©finie
if (!apiKey) {
    console.error("‚ùå ERREUR : La cl√© API Gemini n'est pas d√©finie !");
    process.exit(1); // Quitte le script si la cl√© n'est pas d√©finie
}

const genAI = new GoogleGenerativeAI(apiKey); // Initialise l'API Gemini

/**
 * Fonction asynchrone pour g√©n√©rer un tableau JSON de films √† partir d'un fichier JSON.
 * @param {string} jsonFileName - Le nom du fichier JSON √† traiter.
 */
async function generateSQLfromJSON(jsonFileName) {
    try {
        // Lit le contenu du fichier JSON sp√©cifi√© et le parse en objet JavaScript
        const jsonData = JSON.parse(fs.readFileSync(jsonFileName, "utf8"));

        // Affiche le contenu du fichier JSON apr√®s la lecture (pour v√©rification)
        console.log("‚úÖ Contenu du fichier " + jsonFileName + " apr√®s la lecture :", JSON.stringify(jsonData, null, 2));

        // D√©finit le prompt (la question) pour l'API Gemini
        const prompt = `
        Transforme ces donn√©es JSON en un tableau JSON. Chaque √©l√©ment du tableau doit contenir les donn√©es d'un film, avec les cl√©s suivantes :
        nom, dateDeSortie, realisateur, notePublic, note, compagnie, description, origine, lienImage.

        Voici les donn√©es JSON des films :
        ${JSON.stringify(jsonData, null, 2)}
        `;

        // Obtient le mod√®le g√©n√©ratif Gemini Pro
        const model = genAI.getGenerativeModel({ model: "gemini-pro" });

        // G√©n√®re du contenu √† partir du prompt
        const result = await model.generateContent(prompt);

        // Obtient la r√©ponse de l'API
        const response = await result.response;

        // Extrait le contenu textuel de la r√©ponse
        const jsonOutput = response.text();

        // Affiche la sortie JSON g√©n√©r√©e par l'API Gemini
        console.log("‚úÖ Donn√©es JSON g√©n√©r√©es :\n", jsonOutput);

        // Enregistre la sortie JSON dans un fichier (optionnel)
        fs.writeFileSync("films_data.json", jsonOutput, "utf8");

    } catch (error) {
        console.error("‚ùå Erreur lors de la g√©n√©ration SQL :", error);
    }
}

// Configure yargs pour g√©rer l'argument du nom de fichier
const argv = yargs(hideBin(process.argv))
    .option('file', {
        alias: 'f',
        describe: 'Nom du fichier JSON √† traiter',
        type: 'string',
        demandOption: true, // Oblige √† fournir le nom de fichier
    })
    .parse();

// Appelle la fonction generateSQLfromJSON avec le nom de fichier fourni en argument
generateSQLfromJSON(argv.file);